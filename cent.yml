---
  - name: Initialization environment
    hosts: cent
    tasks:
      - name: Check libselinux-python is installed
        command: rpm -q libselinux-python
        register: rpm_check
        ignore_errors: true

      - name: If libselinux-python not is installed
        yum: name=libselinux-python state=present
        when: rpm_check.rc > 0

      - name: Check epel.repo is exist
        command: ls /etc/yum.repos.d/epel.repo
        register: file_check
        ignore_errors: true

      - name: If epel.repo is not exist
        get_url:
          url: https://raw.githubusercontent.com/eterntl/yum/master/epel.repo
          dest: /etc/yum.repos.d/epel.repo
        when: file_check.rc > 0

      - name: Yum makecache
        shell: yum clean all && yum makecache
        when: file_check.rc > 0

      - name: Yum Install
        yum:
          name:
            - vim
            - wget
            - yum-fastestmirror
            - unzip
            - lrzsz
            - openssh-clients
            - rdate
            - gcc
            - gcc-c++
            - pcre*
            - libaio*
          state: latest

      - name: Update date
        shell: rm -rf /etc/localtime && ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && rdate -s time.nist.gov

      - name: Ensure SElinux is set to Disabled mode
        lineinfile:
          path: /etc/selinux/config
          regexp: '^SELINUX='
          line: SELINUX=disabled

      - name: Setup selinux
        shell: setenforce 0 && ulimit -SHn 655355

      - name: Add ssh port
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
        with_items:
          - { regexp: '^Port 57657', line: 'Port 57657' }
          - { regexp: '^#RSAAuthentication yes', line: 'RSAAuthentication yes' }
          - { regexp: '^#PubkeyAuthentication yes', line: 'PubkeyAuthentication yes' }
          - { regexp: '^PasswordAuthentication yes', line: 'PasswordAuthentication no' }

      - name: Modify history
        lineinfile:
          path: /etc/profile
          regexp: '^HISTSIZE='
          line: HISTSIZE=30

      - name: Setup file ulimit
        lineinfile:
          path: /etc/security/limits.conf
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
        with_items:
          - { regexp: 'sort', line: '* sort nofile 655355' }
          - { regexp: 'hard', line: '* hard nofile 655355' }

      - name: System optimize
        blockinfile:
          path: /etc/sysctl.conf
          insertafter: "net.ipv4.tcp_max_syn_backlog = 20000"
          block: |
            net.ipv4.tcp_synack_retries =2
            net.ipv4.tcp_max_syn_backlog = 20000
            fs.file-max = 655355
            net.ipv4.ip_conntrack_max = 655355
            net.ipv4.netfilter.ip_conntrack_max = 655355
            net.core.somaxconn = 20480
            net.core.rmem_max = 1024123000
            net.core.wmem_max = 16777216
            net.ipv4.tcp_fin_timeout = 30
            net.ipv4.tcp_tw_recycle = 1
            net.ipv4.tcp_tw_reuse=1

      - name: Login log
        blockinfile:
          path: /etc/profile
          insertafter: "ngux"
          block:  |
            history
            USER_IP=`who -u am i 2>/dev/null| awk '{print $NF}'|sed -e 's/[()]//g'`
            if [ "$USER_IP" = "" ]
            then
            USER_IP=`hostname`
            fi
            if [ ! -d /tmp/.ngux ]
            then
            mkdir /tmp/.ngux
            chmod 644 /tmp/.ngux
            fi
            if [ ! -d /tmp/.ngux/${LOGNAME} ]
            then
            mkdir  /tmp/.ngux/${LOGNAME}
            fi
            if [ ! -d /tmp/.ngux/${LOGNAME}/${USER_IP} ]
            then
            mkdir  /tmp/.ngux/${LOGNAME}/${USER_IP}
            chmod -R 600 /tmp/.ngux/${LOGNAME}
            fi
            export HISTSIZE=4096
            DT=`date "+%Y-%m%d-%H%M"`
            export HISTFILE="/tmp/.ngux/${LOGNAME}/${USER_IP}/$DT"
            chmod -R 600 /tmp/.ngux/${LOGNAME}/${USER_IP}/* 2>/dev/null

      - name: If .ssh dir is exits
        shell: ls /root/.ssh
        ignore_errors: True
        register: FANCA

      - name: If .ssh is not exits
        command: mkdir /root/.ssh
        when: FANCA.rc > 0

      - name: If file is exits
        shell: ls /root/.ssh/authorized_keys
        ignore_errors: True
        register: FANCB

      - name: If keys not exits
        command: touch /root/.ssh/authorized_keys
        when: FANCB.rc > 0

      - name: Add pubkey
        lineinfile:
          path: /root/.ssh/authorized_keys
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
        with_items:
          - { regexp: 'Mr.zy', line: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAtrRMfy84y/XeqQwZOxJnZ+XuV8dzmDMigseVtR0tqGXGwUe3Ul7OMocQTetSr5VPiU2lPMEgCo7zufn++FULkSG3z4shs0uRihk/lY0MsmmorzFom+Avnoai+XSMB69Oc6Vjsk+5mHaeKPX3H2X1wzY2sY3rw8Cpuq36apmWL4zIh6+htfFzYjWS+rmsLs4xY1O2bJvFXpcnXyEgcf0wX9pGySIYS508y8RkGg4zx3QxbCOgDiQYpaa0jPAsM4h4pexT00yvtenADtRficwKhafxTqKN4y5WqwY6i1dGalsnuYLj9XTE3YbQUmLJscv3Tvr5S5ky3idOMHFCwf2EkQ== Mr.zy' }
          - { regexp: 'bjb', line: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0oRZeMk7RGzcD6HMMtBjdfJo7uKJnBRioIUV08KKvEtvFs5jALnmrF242xOMcRaCNcqxZp5IU62lM27AnC4f1oiu6E0FNTk+LdKZTgokEfqG+F2qEcWQAWN7wBLGU91Lg9os0UGaxWd6VBFgPg98OTevko9jSNwmzZnSYJhvowhm2J71DyuP5iW39AzVkODSuJqdMKGx0aiSXqwoU1lrarB5tQ7tk2PFQ2F6HlLyOwAaXQp8+XoYZz0ukE4cL8kWYnDA5wnXicvl9RYQSimZUEGqFhPYlTDBUZXjhqy3mOf1u+ZLiOwExZuDvXxYkYgCYTqkSYPqwYQ9Qojk2YCX5Q== bjb' }

      - name: Update iptables config
        shell: grep '57657' /etc/sysconfig/iptables
        register: FANCE
        ignore_errors: True

      - name: Rm iptables config
        shell: rm -rf /etc/sysconfig/iptables
        when: FANCE.rc > 0

      - name: Restart iptables
        get_url:
          url: https://raw.githubusercontent.com/Eterntl/config/master/iptables/iptables
          dest: /etc/sysconfig/iptables
        when: FANCE.rc > 0

      - name: If success wget iptables
        shell: service iptables restart && reboot
        when: FANCE.rc > 0
